substitutions:
  # include the header file with the UART parsing logic 
  header_file: leapmmw.h

#external_components:
#  - source:
#      type: git
#      url: https://github.com/fluffyironboots/Quinled-An-Penta-Presence.git
#      ref: master

esphome:
  name: ${name}
  includes:
    - ${header_file}
  #libraries:
  #  - uart=https://github.com/plerup/espsoftwareserial.git#6.17.1   # fix for uart issues on 6.12.7 which crashes esp8266
  #  - uart=https://github.com/plerup/espsoftwareserial.git


#logger:
#  logs:
#    sensor: DEBUG # reduced logging to minimize web_server target overload..

uart:
  id: uart_bus
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  baud_rate: 115200


## sensor definitions

binary_sensor:
  - platform: gpio
    name: "${friendly_name}"
    id: mmwave_presence_detection
    device_class: motion
    pin:
      number: ${sen0395_io_pin}
      # mode: INPUT_PULLDOWN 
      inverted: false
    # when motion is detected, the radar sensor is on so publish radar state to HA
    on_press:
      then:
        - light.turn_on: 
            id: "${id_name}_cwww"
        lambda: !lambda |-
          if (!id(mmwave_sensor).state) {
            id(mmwave_sensor).publish_state(true);
          }
    on_release:
      then:
        - light.turn_off: 
            id: "${id_name}_cwww"
    
sensor:      
  - platform: custom
    lambda: |-
      auto s = new leapmmw(id(uart_bus));
      App.register_component(s);
      return {};
    sensors:
      
switch:
  - platform: safe_mode
    name: use_safe_mode

  - platform: template
    name: "${friendly_name} mmwave_sensor"
    id: mmwave_sensor # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      - uart.write: "setUartOutput 1 0\r\n"
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89\r\n"
      - delay: 2s 
      - uart.write: "sensorStart\r\n"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop\r\n"


  - platform: template
    name: "led"
    id: led  # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0\r\n"
      - delay: 1s
      - uart.write: "saveConfig\r\n"
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1\r\n"
      - delay: 1s
      - uart.write: "saveConfig\r\n"
      - delay: 1s
      - switch.turn_on: mmwave_sensor 
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      
  - platform: template
    name: "gpio1conf"
    id: gpio1conf  # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setGpioMode 1 0\r\n"
      - delay: 1s
      - uart.write: "saveConfig\r\n"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getGpioMode 1"); 
      - delay: 1s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setGpioMode 1 1\r\n"
      - delay: 1s
      - uart.write: "saveConfig\r\n"
      - delay: 1s
      - switch.turn_on: mmwave_sensor 
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getGpioMode 1");
      

  - platform: template
    name: "gpio2conf"
    id: gpio2conf  # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setGpioMode 2 0\r\n"
      - delay: 1s
      - uart.write: "saveConfig\r\n"
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getGpioMode 2"); 
      
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setGpioMode 2 1\r\n"
      - delay: 1s
      - uart.write: "saveConfig\r\n"
      - delay: 1s
      - switch.turn_on: mmwave_sensor 
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getGpioMode 2");
      

number:
  - platform: template
    name: "distance"
    id: distance # do not change
    entity_category: config
    min_value: 0.15
    max_value: 9.45
    step: 0.15
    unit_of_measurement: M
    mode: box
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getRange");
      return {};
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string range = "setRange 0 " + str_sprintf("%.2f", x) + "\r\n";
          return std::vector<unsigned char>(range.begin(), range.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor 
      
  - platform: template
    name: "latency"
    id: latency # do not change
    entity_category: config
    min_value: 1
    max_value: 600
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getLatency");
      return {};
    step: 1
    unit_of_measurement: s
    mode: box
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string setL = "setLatency 0.1 " + str_sprintf("%.0f", x) + "\r\n";
          return std::vector<unsigned char>(setL.begin(), setL.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: "sensitivity"
    id: sensitivity # do not change
    entity_category: config
    min_value: 0
    max_value: 9
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getSensitivity");
      return {};
    step: 1
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string mss = "setSensitivity " + to_string((int)x) + "\r\n";
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor

button:
  - platform: restart
    name: Restart_ESP_${name}
    entity_category: diagnostic
    on_press:
      - uart.write:
          id: uart_bus
          data: "resetSystem 0\r\n"

  - platform: template
    name: factory_reset_mmwMCU_${name}
    id: factory_reset_mmwMCU
    entity_category: diagnostic
    on_press:
      - switch.turn_off: mmwave_sensor
      - uart.write: "resetCfg\r\n"
      - delay: 1s
      - switch.turn_on: mmwave_sensor
